#!/usr/bin/env python3

import json
import locale
import sys
from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, Spacer, Table, Image


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  max_year = {"year": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    most_sales = item["total_sales"]
    best_year = item["car"]["car_year"]
  
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    if most_sales > max_sales["sales"]:
      item["sales"] = most_sales
      max_sales = item

    if best_year > max_year["year"]:
      item["year"] = best_year
      max_year = item

 
  summary = [
      "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]), 

      "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["sales"]),

      "The most popular year was {} with: {} sales".format(max_year["year"], max_sales["sales"])      
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])
  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  report = SimpleDocTemplate("c:/Users/Miro/My Drive/Python_coursera/6 Automating real world tasks/cars_pdf/test.pdf")
  styles = getSampleStyleSheet()
  report_title = Paragraph("A complete report of car sales", styles["h1"])
  
  split_summary = ""

  for i in summary:
    split_summary += i + "<br /> <br />"
    

    print(split_summary)


  report_main = Paragraph(split_summary, styles["h2"])


  report.build([report_title, report_main])



  # TODO: send the PDF report as an email attachment


if __name__ == "__main__":
  main(sys.argv)
