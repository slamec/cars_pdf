#!/usr/bin/env python3

import json
import locale
from random import betavariate
import sys
from tkinter.messagebox import YES
from reportlab.platypus import SimpleDocTemplate
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import Paragraph, Spacer, Table, Image
from reportlab.lib import colors
from emails import *


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  max_sales = {"sales": 0}
  sales_by_year = {}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    most_sales = item["total_sales"]
    
      
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item

    if most_sales > max_sales["sales"]:
      item["sales"] = most_sales
      max_sales = item
  


    #most popular year with biggest sales, set default append dictionary if does not exists
    best_year = item["car"]["car_year"]
    sales_by_year[best_year] = sales_by_year.setdefault(best_year, 0) + most_sales

    print(sales_by_year)

  # set most popular year and amount:
  most_popular_year = sorted(sales_by_year, key = sales_by_year.get, reverse=True)[0]
  most_popular_sales = sales_by_year[most_popular_year]
 
  summary = [
      "The {} generated the most revenue: ${}".format(format_car(max_revenue["car"]), max_revenue["revenue"]), 

      "The {} had the most sales: {}".format(format_car(max_sales["car"]), max_sales["sales"]),

      "The most popular year was {} with {} sales".format(most_popular_year, most_popular_sales)    #should be most popular year with the most sales  
  ]

  return summary


def cars_dict_to_table(car_data):
  """Turns the data in car_data into a list of lists."""
  
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in car_data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total_sales"]])


  return table_data


def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)


  split_summary = ""

  for i in summary:
    split_summary += i + "<br />"
    

    print(split_summary)


  split_summary_mail = ""

  for i in summary:
    split_summary_mail += i + "\n"


  styles = getSampleStyleSheet()
  report = SimpleDocTemplate("cars.pdf")
  report_title = Paragraph("A complete report of car sales", styles["h1"])
  report_info = Paragraph(split_summary, styles["BodyText"])
  table_style = [('GRID', (0,0), (-1,-1), 1, colors.black),
                ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
                ('ALIGN', (0,0), (-1,-1), 'CENTER')]
  report_table = Table(data = cars_dict_to_table(data), style = table_style, hAlign="LEFT")
  empty_line = Spacer(1,20)

  report.build([report_title, empty_line, report_info, empty_line, report_table])


  #send the PDF report as an email attachment

  sender = "automation@example.com"  
  recipient = "<user>@example.com"
  subject = "Sales summary for the last month"
  body = split_summary_mail
  attachment_path = "cars.pdf" #or abs/rel path

  send(generate(sender, recipient, subject, body, attachment_path))


if __name__ == "__main__":
  main(sys.argv)
